/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>
#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>


// BEGIN declare_enums
namespace apache { namespace thrift {

enum class ProtocolId {
  BINARY = 0,
  COMPACT = 2,
  FROZEN2 = 6
};

using _ProtocolId_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<ProtocolId, ProtocolId>;
extern const _ProtocolId_EnumMapFactory::ValuesToNamesMapType _ProtocolId_VALUES_TO_NAMES;
extern const _ProtocolId_EnumMapFactory::NamesToValuesMapType _ProtocolId_NAMES_TO_VALUES;



enum class RpcKind {
  SINGLE_REQUEST_SINGLE_RESPONSE = 0,
  SINGLE_REQUEST_NO_RESPONSE = 1,
  STREAMING_REQUEST_SINGLE_RESPONSE = 2,
  STREAMING_REQUEST_NO_RESPONSE = 3,
  SINGLE_REQUEST_STREAMING_RESPONSE = 4,
  STREAMING_REQUEST_STREAMING_RESPONSE = 5
};

using _RpcKind_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<RpcKind, RpcKind>;
extern const _RpcKind_EnumMapFactory::ValuesToNamesMapType _RpcKind_VALUES_TO_NAMES;
extern const _RpcKind_EnumMapFactory::NamesToValuesMapType _RpcKind_NAMES_TO_VALUES;



enum class RpcPriority {
  HIGH_IMPORTANT = 0,
  HIGH = 1,
  IMPORTANT = 2,
  NORMAL = 3,
  BEST_EFFORT = 4,
  N_PRIORITIES = 5
};

using _RpcPriority_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<RpcPriority, RpcPriority>;
extern const _RpcPriority_EnumMapFactory::ValuesToNamesMapType _RpcPriority_VALUES_TO_NAMES;
extern const _RpcPriority_EnumMapFactory::NamesToValuesMapType _RpcPriority_NAMES_TO_VALUES;



}} // apache::thrift
namespace std {


template<> struct hash<typename  ::apache::thrift::ProtocolId> : public apache::thrift::detail::enum_hash<typename  ::apache::thrift::ProtocolId> {};
template<> struct equal_to<typename  ::apache::thrift::ProtocolId> : public apache::thrift::detail::enum_equal_to<typename  ::apache::thrift::ProtocolId> {};


template<> struct hash<typename  ::apache::thrift::RpcKind> : public apache::thrift::detail::enum_hash<typename  ::apache::thrift::RpcKind> {};
template<> struct equal_to<typename  ::apache::thrift::RpcKind> : public apache::thrift::detail::enum_equal_to<typename  ::apache::thrift::RpcKind> {};


template<> struct hash<typename  ::apache::thrift::RpcPriority> : public apache::thrift::detail::enum_hash<typename  ::apache::thrift::RpcPriority> {};
template<> struct equal_to<typename  ::apache::thrift::RpcPriority> : public apache::thrift::detail::enum_equal_to<typename  ::apache::thrift::RpcPriority> {};


} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage< ::apache::thrift::ProtocolId>;
template <> const std::size_t TEnumTraits< ::apache::thrift::ProtocolId>::size;
template <> const folly::Range<const  ::apache::thrift::ProtocolId*> TEnumTraits< ::apache::thrift::ProtocolId>::values;
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::apache::thrift::ProtocolId>::names;
template <> const char* TEnumTraits< ::apache::thrift::ProtocolId>::findName( ::apache::thrift::ProtocolId value);
template <> bool TEnumTraits< ::apache::thrift::ProtocolId>::findValue(const char* name,  ::apache::thrift::ProtocolId* outValue);

template <> inline constexpr  ::apache::thrift::ProtocolId TEnumTraits< ::apache::thrift::ProtocolId>::min() {
  return  ::apache::thrift::ProtocolId::BINARY;
}

template <> inline constexpr  ::apache::thrift::ProtocolId TEnumTraits< ::apache::thrift::ProtocolId>::max() {
  return  ::apache::thrift::ProtocolId::FROZEN2;
}


template <> struct TEnumDataStorage< ::apache::thrift::RpcKind>;
template <> const std::size_t TEnumTraits< ::apache::thrift::RpcKind>::size;
template <> const folly::Range<const  ::apache::thrift::RpcKind*> TEnumTraits< ::apache::thrift::RpcKind>::values;
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::apache::thrift::RpcKind>::names;
template <> const char* TEnumTraits< ::apache::thrift::RpcKind>::findName( ::apache::thrift::RpcKind value);
template <> bool TEnumTraits< ::apache::thrift::RpcKind>::findValue(const char* name,  ::apache::thrift::RpcKind* outValue);

template <> inline constexpr  ::apache::thrift::RpcKind TEnumTraits< ::apache::thrift::RpcKind>::min() {
  return  ::apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE;
}

template <> inline constexpr  ::apache::thrift::RpcKind TEnumTraits< ::apache::thrift::RpcKind>::max() {
  return  ::apache::thrift::RpcKind::STREAMING_REQUEST_STREAMING_RESPONSE;
}


template <> struct TEnumDataStorage< ::apache::thrift::RpcPriority>;
template <> const std::size_t TEnumTraits< ::apache::thrift::RpcPriority>::size;
template <> const folly::Range<const  ::apache::thrift::RpcPriority*> TEnumTraits< ::apache::thrift::RpcPriority>::values;
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::apache::thrift::RpcPriority>::names;
template <> const char* TEnumTraits< ::apache::thrift::RpcPriority>::findName( ::apache::thrift::RpcPriority value);
template <> bool TEnumTraits< ::apache::thrift::RpcPriority>::findValue(const char* name,  ::apache::thrift::RpcPriority* outValue);

template <> inline constexpr  ::apache::thrift::RpcPriority TEnumTraits< ::apache::thrift::RpcPriority>::min() {
  return  ::apache::thrift::RpcPriority::HIGH_IMPORTANT;
}

template <> inline constexpr  ::apache::thrift::RpcPriority TEnumTraits< ::apache::thrift::RpcPriority>::max() {
  return  ::apache::thrift::RpcPriority::N_PRIORITIES;
}


}} // apache::thrift


// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare
namespace apache { namespace thrift {
class RequestRpcMetadata;
class ResponseRpcMetadata;
}} // apache::thrift
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace apache { namespace thrift {
class RequestRpcMetadata final : private apache::thrift::detail::st::ComparisonOperators<RequestRpcMetadata> {
 public:

  RequestRpcMetadata();

  // FragileConstructor for use in initialization lists only.
  RequestRpcMetadata(apache::thrift::FragileConstructor,  ::apache::thrift::ProtocolId protocol__arg, std::string name__arg,  ::apache::thrift::RpcKind kind__arg, int32_t seqId__arg, int32_t clientTimeoutMs__arg, int32_t queueTimeoutMs__arg,  ::apache::thrift::RpcPriority priority__arg, std::map<std::string, std::string> otherMetadata__arg, std::string host__arg, std::string url__arg);
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  RequestRpcMetadata(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    RequestRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    protocol = arg.move();
    __isset.protocol = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  RequestRpcMetadata(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    RequestRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    name = arg.move();
    __isset.name = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  RequestRpcMetadata(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    RequestRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    kind = arg.move();
    __isset.kind = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  RequestRpcMetadata(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    RequestRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    seqId = arg.move();
    __isset.seqId = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  RequestRpcMetadata(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    RequestRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    clientTimeoutMs = arg.move();
    __isset.clientTimeoutMs = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  RequestRpcMetadata(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    RequestRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    queueTimeoutMs = arg.move();
    __isset.queueTimeoutMs = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  RequestRpcMetadata(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    RequestRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    priority = arg.move();
    __isset.priority = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  RequestRpcMetadata(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    RequestRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    otherMetadata = arg.move();
    __isset.otherMetadata = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  RequestRpcMetadata(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    RequestRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    host = arg.move();
    __isset.host = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  RequestRpcMetadata(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    RequestRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    url = arg.move();
    __isset.url = true;
  }

  RequestRpcMetadata(RequestRpcMetadata&&) = default;

  RequestRpcMetadata(const RequestRpcMetadata&) = default;

  RequestRpcMetadata& operator=(RequestRpcMetadata&&) = default;

  RequestRpcMetadata& operator=(const RequestRpcMetadata&) = default;
  void __clear();

  ~RequestRpcMetadata();

   ::apache::thrift::ProtocolId protocol;
  std::string name;
   ::apache::thrift::RpcKind kind;
  int32_t seqId;
  int32_t clientTimeoutMs;
  int32_t queueTimeoutMs;
   ::apache::thrift::RpcPriority priority;
  std::map<std::string, std::string> otherMetadata;
  std::string host;
  std::string url;

  struct __isset {
    bool protocol;
    bool name;
    bool kind;
    bool seqId;
    bool clientTimeoutMs;
    bool queueTimeoutMs;
    bool priority;
    bool otherMetadata;
    bool host;
    bool url;
  } __isset = {};
  bool operator==(const RequestRpcMetadata& rhs) const;
  bool operator < (const RequestRpcMetadata& rhs) const;

  const  ::apache::thrift::ProtocolId* get_protocol() const& {
    return __isset.protocol ? std::addressof(protocol) : nullptr;
  }

   ::apache::thrift::ProtocolId* get_protocol() & {
    return __isset.protocol ? std::addressof(protocol) : nullptr;
  }
   ::apache::thrift::ProtocolId* get_protocol() && = delete;

   ::apache::thrift::ProtocolId& set_protocol( ::apache::thrift::ProtocolId protocol_) {
    protocol = protocol_;
    __isset.protocol = true;
    return protocol;
  }

  const std::string* get_name() const& {
    return __isset.name ? std::addressof(name) : nullptr;
  }

  std::string* get_name() & {
    return __isset.name ? std::addressof(name) : nullptr;
  }
  std::string* get_name() && = delete;

  template <typename T_RequestRpcMetadata_name_struct_setter = std::string>
  std::string& set_name(T_RequestRpcMetadata_name_struct_setter&& name_) {
    name = std::forward<T_RequestRpcMetadata_name_struct_setter>(name_);
    __isset.name = true;
    return name;
  }

  const  ::apache::thrift::RpcKind* get_kind() const& {
    return __isset.kind ? std::addressof(kind) : nullptr;
  }

   ::apache::thrift::RpcKind* get_kind() & {
    return __isset.kind ? std::addressof(kind) : nullptr;
  }
   ::apache::thrift::RpcKind* get_kind() && = delete;

   ::apache::thrift::RpcKind& set_kind( ::apache::thrift::RpcKind kind_) {
    kind = kind_;
    __isset.kind = true;
    return kind;
  }

  const int32_t* get_seqId() const& {
    return __isset.seqId ? std::addressof(seqId) : nullptr;
  }

  int32_t* get_seqId() & {
    return __isset.seqId ? std::addressof(seqId) : nullptr;
  }
  int32_t* get_seqId() && = delete;

  int32_t& set_seqId(int32_t seqId_) {
    seqId = seqId_;
    __isset.seqId = true;
    return seqId;
  }

  const int32_t* get_clientTimeoutMs() const& {
    return __isset.clientTimeoutMs ? std::addressof(clientTimeoutMs) : nullptr;
  }

  int32_t* get_clientTimeoutMs() & {
    return __isset.clientTimeoutMs ? std::addressof(clientTimeoutMs) : nullptr;
  }
  int32_t* get_clientTimeoutMs() && = delete;

  int32_t& set_clientTimeoutMs(int32_t clientTimeoutMs_) {
    clientTimeoutMs = clientTimeoutMs_;
    __isset.clientTimeoutMs = true;
    return clientTimeoutMs;
  }

  const int32_t* get_queueTimeoutMs() const& {
    return __isset.queueTimeoutMs ? std::addressof(queueTimeoutMs) : nullptr;
  }

  int32_t* get_queueTimeoutMs() & {
    return __isset.queueTimeoutMs ? std::addressof(queueTimeoutMs) : nullptr;
  }
  int32_t* get_queueTimeoutMs() && = delete;

  int32_t& set_queueTimeoutMs(int32_t queueTimeoutMs_) {
    queueTimeoutMs = queueTimeoutMs_;
    __isset.queueTimeoutMs = true;
    return queueTimeoutMs;
  }

  const  ::apache::thrift::RpcPriority* get_priority() const& {
    return __isset.priority ? std::addressof(priority) : nullptr;
  }

   ::apache::thrift::RpcPriority* get_priority() & {
    return __isset.priority ? std::addressof(priority) : nullptr;
  }
   ::apache::thrift::RpcPriority* get_priority() && = delete;

   ::apache::thrift::RpcPriority& set_priority( ::apache::thrift::RpcPriority priority_) {
    priority = priority_;
    __isset.priority = true;
    return priority;
  }
  const std::map<std::string, std::string>* get_otherMetadata() const&;
  std::map<std::string, std::string>* get_otherMetadata() &;
  std::map<std::string, std::string>* get_otherMetadata() && = delete;

  template <typename T_RequestRpcMetadata_otherMetadata_struct_setter = std::map<std::string, std::string>>
  std::map<std::string, std::string>& set_otherMetadata(T_RequestRpcMetadata_otherMetadata_struct_setter&& otherMetadata_) {
    otherMetadata = std::forward<T_RequestRpcMetadata_otherMetadata_struct_setter>(otherMetadata_);
    __isset.otherMetadata = true;
    return otherMetadata;
  }

  const std::string* get_host() const& {
    return __isset.host ? std::addressof(host) : nullptr;
  }

  std::string* get_host() & {
    return __isset.host ? std::addressof(host) : nullptr;
  }
  std::string* get_host() && = delete;

  template <typename T_RequestRpcMetadata_host_struct_setter = std::string>
  std::string& set_host(T_RequestRpcMetadata_host_struct_setter&& host_) {
    host = std::forward<T_RequestRpcMetadata_host_struct_setter>(host_);
    __isset.host = true;
    return host;
  }

  const std::string* get_url() const& {
    return __isset.url ? std::addressof(url) : nullptr;
  }

  std::string* get_url() & {
    return __isset.url ? std::addressof(url) : nullptr;
  }
  std::string* get_url() && = delete;

  template <typename T_RequestRpcMetadata_url_struct_setter = std::string>
  std::string& set_url(T_RequestRpcMetadata_url_struct_setter&& url_) {
    url = std::forward<T_RequestRpcMetadata_url_struct_setter>(url_);
    __isset.url = true;
    return url;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);

  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< RequestRpcMetadata >;
};

void swap(RequestRpcMetadata& a, RequestRpcMetadata& b);
extern template void RequestRpcMetadata::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t RequestRpcMetadata::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t RequestRpcMetadata::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t RequestRpcMetadata::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void RequestRpcMetadata::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t RequestRpcMetadata::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t RequestRpcMetadata::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t RequestRpcMetadata::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t RequestRpcMetadata::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}} // apache::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::thrift::RequestRpcMetadata>::clear( ::apache::thrift::RequestRpcMetadata* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::thrift::RequestRpcMetadata>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::thrift::RequestRpcMetadata>::write(Protocol* proto,  ::apache::thrift::RequestRpcMetadata const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::thrift::RequestRpcMetadata>::read(Protocol* proto,  ::apache::thrift::RequestRpcMetadata* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::thrift::RequestRpcMetadata>::serializedSize(Protocol const* proto,  ::apache::thrift::RequestRpcMetadata const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::thrift::RequestRpcMetadata>::serializedSizeZC(Protocol const* proto,  ::apache::thrift::RequestRpcMetadata const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace thrift {
class ResponseRpcMetadata final : private apache::thrift::detail::st::ComparisonOperators<ResponseRpcMetadata> {
 public:

  ResponseRpcMetadata() :
      protocol( ::apache::thrift::ProtocolId::BINARY),
      seqId(0) {}
  // FragileConstructor for use in initialization lists only.
  ResponseRpcMetadata(apache::thrift::FragileConstructor,  ::apache::thrift::ProtocolId protocol__arg, int32_t seqId__arg, std::map<std::string, std::string> otherMetadata__arg);
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ResponseRpcMetadata(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ResponseRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    protocol = arg.move();
    __isset.protocol = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ResponseRpcMetadata(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ResponseRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    seqId = arg.move();
    __isset.seqId = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ResponseRpcMetadata(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ResponseRpcMetadata(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    otherMetadata = arg.move();
    __isset.otherMetadata = true;
  }

  ResponseRpcMetadata(ResponseRpcMetadata&&) = default;

  ResponseRpcMetadata(const ResponseRpcMetadata&) = default;

  ResponseRpcMetadata& operator=(ResponseRpcMetadata&&) = default;

  ResponseRpcMetadata& operator=(const ResponseRpcMetadata&) = default;
  void __clear();
   ::apache::thrift::ProtocolId protocol;
  int32_t seqId;
  std::map<std::string, std::string> otherMetadata;

  struct __isset {
    bool protocol;
    bool seqId;
    bool otherMetadata;
  } __isset = {};
  bool operator==(const ResponseRpcMetadata& rhs) const;
  bool operator < (const ResponseRpcMetadata& rhs) const;

  const  ::apache::thrift::ProtocolId* get_protocol() const& {
    return __isset.protocol ? std::addressof(protocol) : nullptr;
  }

   ::apache::thrift::ProtocolId* get_protocol() & {
    return __isset.protocol ? std::addressof(protocol) : nullptr;
  }
   ::apache::thrift::ProtocolId* get_protocol() && = delete;

   ::apache::thrift::ProtocolId& set_protocol( ::apache::thrift::ProtocolId protocol_) {
    protocol = protocol_;
    __isset.protocol = true;
    return protocol;
  }

  const int32_t* get_seqId() const& {
    return __isset.seqId ? std::addressof(seqId) : nullptr;
  }

  int32_t* get_seqId() & {
    return __isset.seqId ? std::addressof(seqId) : nullptr;
  }
  int32_t* get_seqId() && = delete;

  int32_t& set_seqId(int32_t seqId_) {
    seqId = seqId_;
    __isset.seqId = true;
    return seqId;
  }
  const std::map<std::string, std::string>* get_otherMetadata() const&;
  std::map<std::string, std::string>* get_otherMetadata() &;
  std::map<std::string, std::string>* get_otherMetadata() && = delete;

  template <typename T_ResponseRpcMetadata_otherMetadata_struct_setter = std::map<std::string, std::string>>
  std::map<std::string, std::string>& set_otherMetadata(T_ResponseRpcMetadata_otherMetadata_struct_setter&& otherMetadata_) {
    otherMetadata = std::forward<T_ResponseRpcMetadata_otherMetadata_struct_setter>(otherMetadata_);
    __isset.otherMetadata = true;
    return otherMetadata;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  static void translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype);

  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< ResponseRpcMetadata >;
};

void swap(ResponseRpcMetadata& a, ResponseRpcMetadata& b);
extern template void ResponseRpcMetadata::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ResponseRpcMetadata::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ResponseRpcMetadata::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ResponseRpcMetadata::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ResponseRpcMetadata::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ResponseRpcMetadata::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ResponseRpcMetadata::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ResponseRpcMetadata::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template <class Protocol_>
uint32_t ResponseRpcMetadata::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  readNoXfer(iprot);
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

}} // apache::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::thrift::ResponseRpcMetadata>::clear( ::apache::thrift::ResponseRpcMetadata* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::apache::thrift::ResponseRpcMetadata>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::thrift::ResponseRpcMetadata>::write(Protocol* proto,  ::apache::thrift::ResponseRpcMetadata const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> void Cpp2Ops< ::apache::thrift::ResponseRpcMetadata>::read(Protocol* proto,  ::apache::thrift::ResponseRpcMetadata* obj) {
  return obj->readNoXfer(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::thrift::ResponseRpcMetadata>::serializedSize(Protocol const* proto,  ::apache::thrift::ResponseRpcMetadata const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> uint32_t Cpp2Ops< ::apache::thrift::ResponseRpcMetadata>::serializedSizeZC(Protocol const* proto,  ::apache::thrift::ResponseRpcMetadata const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
