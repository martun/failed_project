/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/lib/cpp2/gen-cpp2/Sasl_types.h"

#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/ProtocolReaderStructReadState.h>

namespace apache { namespace thrift { namespace sasl {

template <class Protocol_>
void SaslOutcome::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_success:
  {
    iprot->readBool(this->success);
    this->__isset.success = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_additional_data:
  {
    iprot->readString(this->additional_data);
    this->__isset.additional_data = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_BOOL)) {
        goto _readField_success;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_additional_data;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t SaslOutcome::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SaslOutcome");
  xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->success);
  if (this->__isset.additional_data) {
    xfer += prot_->serializedFieldSize("additional_data", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->additional_data);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SaslOutcome::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SaslOutcome");
  xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->success);
  if (this->__isset.additional_data) {
    xfer += prot_->serializedFieldSize("additional_data", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->additional_data);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SaslOutcome::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SaslOutcome");
  xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->writeBool(this->success);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.additional_data) {
    xfer += prot_->writeFieldBegin("additional_data", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->additional_data);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // apache::thrift::sasl
namespace apache { namespace thrift { namespace sasl {

template <class Protocol_>
void SaslRequest::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_response:
  {
    iprot->readString(this->response);
    this->__isset.response = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_abort:
  {
    iprot->readBool(this->abort);
    this->__isset.abort = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_response;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_BOOL)) {
        goto _readField_abort;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t SaslRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SaslRequest");
  if (this->__isset.response) {
    xfer += prot_->serializedFieldSize("response", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeString(this->response);
  }
  if (this->__isset.abort) {
    xfer += prot_->serializedFieldSize("abort", apache::thrift::protocol::T_BOOL, 2);
    xfer += prot_->serializedSizeBool(this->abort);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SaslRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SaslRequest");
  if (this->__isset.response) {
    xfer += prot_->serializedFieldSize("response", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeString(this->response);
  }
  if (this->__isset.abort) {
    xfer += prot_->serializedFieldSize("abort", apache::thrift::protocol::T_BOOL, 2);
    xfer += prot_->serializedSizeBool(this->abort);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SaslRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SaslRequest");
  if (this->__isset.response) {
    xfer += prot_->writeFieldBegin("response", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->writeString(this->response);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.abort) {
    xfer += prot_->writeFieldBegin("abort", apache::thrift::protocol::T_BOOL, 2);
    xfer += prot_->writeBool(this->abort);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // apache::thrift::sasl
namespace apache { namespace thrift { namespace sasl {

template <class Protocol_>
void SaslReply::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_challenge:
  {
    iprot->readString(this->challenge);
    this->__isset.challenge = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_outcome:
  {
    ::apache::thrift::Cpp2Ops<  ::apache::thrift::sasl::SaslOutcome>::read(iprot, &this->outcome);
    this->__isset.outcome = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_mechanism:
  {
    iprot->readString(this->mechanism);
    this->__isset.mechanism = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_challenge;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_outcome;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_mechanism;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t SaslReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SaslReply");
  if (this->__isset.challenge) {
    xfer += prot_->serializedFieldSize("challenge", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeString(this->challenge);
  }
  if (this->__isset.outcome) {
    xfer += prot_->serializedFieldSize("outcome", apache::thrift::protocol::T_STRUCT, 2);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::sasl::SaslOutcome>::serializedSize(prot_, &this->outcome);
  }
  if (this->__isset.mechanism) {
    xfer += prot_->serializedFieldSize("mechanism", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->mechanism);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SaslReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SaslReply");
  if (this->__isset.challenge) {
    xfer += prot_->serializedFieldSize("challenge", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->serializedSizeString(this->challenge);
  }
  if (this->__isset.outcome) {
    xfer += prot_->serializedFieldSize("outcome", apache::thrift::protocol::T_STRUCT, 2);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::sasl::SaslOutcome>::serializedSizeZC(prot_, &this->outcome);
  }
  if (this->__isset.mechanism) {
    xfer += prot_->serializedFieldSize("mechanism", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->mechanism);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SaslReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SaslReply");
  if (this->__isset.challenge) {
    xfer += prot_->writeFieldBegin("challenge", apache::thrift::protocol::T_STRING, 1);
    xfer += prot_->writeString(this->challenge);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.outcome) {
    xfer += prot_->writeFieldBegin("outcome", apache::thrift::protocol::T_STRUCT, 2);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::sasl::SaslOutcome>::write(prot_, &this->outcome);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.mechanism) {
    xfer += prot_->writeFieldBegin("mechanism", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeString(this->mechanism);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // apache::thrift::sasl
namespace apache { namespace thrift { namespace sasl {

template <class Protocol_>
void SaslStart::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_mechanism:
  {
    iprot->readString(this->mechanism);
    this->__isset.mechanism = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_request:
  {
    ::apache::thrift::Cpp2Ops<  ::apache::thrift::sasl::SaslRequest>::read(iprot, &this->request);
    this->__isset.request = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_mechanisms:
  {
    this->mechanisms = std::vector<std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->mechanisms);
    this->__isset.mechanisms = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_mechanism;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_request;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_mechanisms;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t SaslStart::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SaslStart");
  xfer += prot_->serializedFieldSize("mechanism", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->mechanism);
  if (this->__isset.request) {
    xfer += prot_->serializedFieldSize("request", apache::thrift::protocol::T_STRUCT, 2);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::sasl::SaslRequest>::serializedSize(prot_, &this->request);
  }
  if (this->__isset.mechanisms) {
    xfer += prot_->serializedFieldSize("mechanisms", apache::thrift::protocol::T_LIST, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->mechanisms);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SaslStart::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SaslStart");
  xfer += prot_->serializedFieldSize("mechanism", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->mechanism);
  if (this->__isset.request) {
    xfer += prot_->serializedFieldSize("request", apache::thrift::protocol::T_STRUCT, 2);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::sasl::SaslRequest>::serializedSizeZC(prot_, &this->request);
  }
  if (this->__isset.mechanisms) {
    xfer += prot_->serializedFieldSize("mechanisms", apache::thrift::protocol::T_LIST, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->mechanisms);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SaslStart::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SaslStart");
  xfer += prot_->writeFieldBegin("mechanism", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->mechanism);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.request) {
    xfer += prot_->writeFieldBegin("request", apache::thrift::protocol::T_STRUCT, 2);
    xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::sasl::SaslRequest>::write(prot_, &this->request);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.mechanisms) {
    xfer += prot_->writeFieldBegin("mechanisms", apache::thrift::protocol::T_LIST, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->mechanisms);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // apache::thrift::sasl
