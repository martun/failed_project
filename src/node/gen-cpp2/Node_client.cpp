/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include "node/gen-cpp2/NodeAsyncClient.h"

#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>

namespace node { namespace cpp2 {
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::node::cpp2::NotifyNewInventoryRequest*>> Node_notify_new_inventory_hash_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_STRUCT,  ::node::cpp2::NotifyNewInventoryResponse*>> Node_notify_new_inventory_hash_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::node::cpp2::SendTransactionRequest*>> Node_send_transaction_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_STRUCT,  ::node::cpp2::SendTransactionResponse*>> Node_send_transaction_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::node::cpp2::GetPeerInfoRequest*>> Node_get_peer_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_STRUCT,  ::node::cpp2::GetPeerInfoResponse*>> Node_get_peer_presult;

template <typename Protocol_>
void NodeAsyncClient::notify_new_inventory_hashT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  connectionContext_->setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "Node.notify_new_inventory_hash", connectionContext_.get());
  Node_notify_new_inventory_hash_pargs args;
  args.get<0>().value = const_cast< ::node::cpp2::NotifyNewInventoryRequest*>(&request);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "notify_new_inventory_hash", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, useSync);
  connectionContext_->setRequestHeader(nullptr);
}

template <typename Protocol_>
void NodeAsyncClient::send_transactionT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::node::cpp2::SendTransactionRequest& request) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  connectionContext_->setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "Node.send_transaction", connectionContext_.get());
  Node_send_transaction_pargs args;
  args.get<0>().value = const_cast< ::node::cpp2::SendTransactionRequest*>(&request);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "send_transaction", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, useSync);
  connectionContext_->setRequestHeader(nullptr);
}

template <typename Protocol_>
void NodeAsyncClient::get_peerT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::node::cpp2::GetPeerInfoRequest& request) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  connectionContext_->setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "Node.get_peer", connectionContext_.get());
  Node_get_peer_pargs args;
  args.get<0>().value = const_cast< ::node::cpp2::GetPeerInfoRequest*>(&request);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "get_peer", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, useSync);
  connectionContext_->setRequestHeader(nullptr);
}



void NodeAsyncClient::notify_new_inventory_hash(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  notify_new_inventory_hashImpl(false, rpcOptions, std::move(callback), request);
}

void NodeAsyncClient::notify_new_inventory_hash(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  notify_new_inventory_hashImpl(false, rpcOptions, std::move(callback), request);
}

void NodeAsyncClient::notify_new_inventory_hashImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      notify_new_inventory_hashT(&writer, useSync, rpcOptions, std::move(callback), request);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      notify_new_inventory_hashT(&writer, useSync, rpcOptions, std::move(callback), request);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void NodeAsyncClient::sync_notify_new_inventory_hash( ::node::cpp2::NotifyNewInventoryResponse& _return, const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_notify_new_inventory_hash(rpcOptions, _return, request);
}

void NodeAsyncClient::sync_notify_new_inventory_hash(apache::thrift::RpcOptions& rpcOptions,  ::node::cpp2::NotifyNewInventoryResponse& _return, const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE);
  notify_new_inventory_hashImpl(true, rpcOptions, std::move(callback), request);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_notify_new_inventory_hash(_return, _returnState);
}

folly::Future< ::node::cpp2::NotifyNewInventoryResponse> NodeAsyncClient::future_notify_new_inventory_hash(const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_notify_new_inventory_hash(rpcOptions, request);
}

folly::SemiFuture< ::node::cpp2::NotifyNewInventoryResponse> NodeAsyncClient::semifuture_notify_new_inventory_hash(const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_notify_new_inventory_hash(rpcOptions, request);
}

folly::Future< ::node::cpp2::NotifyNewInventoryResponse> NodeAsyncClient::future_notify_new_inventory_hash(apache::thrift::RpcOptions& rpcOptions, const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  folly::Promise< ::node::cpp2::NotifyNewInventoryResponse> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback< ::node::cpp2::NotifyNewInventoryResponse>>(std::move(_promise), recv_wrapped_notify_new_inventory_hash, channel_);
  notify_new_inventory_hash(rpcOptions, std::move(callback), request);
  return _future;
}

folly::SemiFuture< ::node::cpp2::NotifyNewInventoryResponse> NodeAsyncClient::semifuture_notify_new_inventory_hash(apache::thrift::RpcOptions& rpcOptions, const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  return future_notify_new_inventory_hash(rpcOptions, request).semi();
}

folly::Future<std::pair< ::node::cpp2::NotifyNewInventoryResponse, std::unique_ptr<apache::thrift::transport::THeader>>> NodeAsyncClient::header_future_notify_new_inventory_hash(apache::thrift::RpcOptions& rpcOptions, const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  folly::Promise<std::pair< ::node::cpp2::NotifyNewInventoryResponse, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback< ::node::cpp2::NotifyNewInventoryResponse>>(std::move(_promise), recv_wrapped_notify_new_inventory_hash, channel_);
  notify_new_inventory_hash(rpcOptions, std::move(callback), request);
  return _future;
}

folly::SemiFuture<std::pair< ::node::cpp2::NotifyNewInventoryResponse, std::unique_ptr<apache::thrift::transport::THeader>>> NodeAsyncClient::header_semifuture_notify_new_inventory_hash(apache::thrift::RpcOptions& rpcOptions, const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  return NodeAsyncClient::header_future_notify_new_inventory_hash(rpcOptions, request).semi();
}

void NodeAsyncClient::notify_new_inventory_hash(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::node::cpp2::NotifyNewInventoryRequest& request) {
  notify_new_inventory_hash(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), request);
}

folly::exception_wrapper NodeAsyncClient::recv_wrapped_notify_new_inventory_hash( ::node::cpp2::NotifyNewInventoryResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = Node_notify_new_inventory_hash_presult;
  constexpr auto const fname = "notify_new_inventory_hash";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void NodeAsyncClient::recv_notify_new_inventory_hash( ::node::cpp2::NotifyNewInventoryResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_notify_new_inventory_hash(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void NodeAsyncClient::recv_instance_notify_new_inventory_hash( ::node::cpp2::NotifyNewInventoryResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_notify_new_inventory_hash(_return, state);
}

folly::exception_wrapper NodeAsyncClient::recv_instance_wrapped_notify_new_inventory_hash( ::node::cpp2::NotifyNewInventoryResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_notify_new_inventory_hash(_return, state);
}

void NodeAsyncClient::send_transaction(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::node::cpp2::SendTransactionRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  send_transactionImpl(false, rpcOptions, std::move(callback), request);
}

void NodeAsyncClient::send_transaction(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::node::cpp2::SendTransactionRequest& request) {
  send_transactionImpl(false, rpcOptions, std::move(callback), request);
}

void NodeAsyncClient::send_transactionImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::node::cpp2::SendTransactionRequest& request) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      send_transactionT(&writer, useSync, rpcOptions, std::move(callback), request);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      send_transactionT(&writer, useSync, rpcOptions, std::move(callback), request);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void NodeAsyncClient::sync_send_transaction( ::node::cpp2::SendTransactionResponse& _return, const  ::node::cpp2::SendTransactionRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_send_transaction(rpcOptions, _return, request);
}

void NodeAsyncClient::sync_send_transaction(apache::thrift::RpcOptions& rpcOptions,  ::node::cpp2::SendTransactionResponse& _return, const  ::node::cpp2::SendTransactionRequest& request) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE);
  send_transactionImpl(true, rpcOptions, std::move(callback), request);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_send_transaction(_return, _returnState);
}

folly::Future< ::node::cpp2::SendTransactionResponse> NodeAsyncClient::future_send_transaction(const  ::node::cpp2::SendTransactionRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_send_transaction(rpcOptions, request);
}

folly::SemiFuture< ::node::cpp2::SendTransactionResponse> NodeAsyncClient::semifuture_send_transaction(const  ::node::cpp2::SendTransactionRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_send_transaction(rpcOptions, request);
}

folly::Future< ::node::cpp2::SendTransactionResponse> NodeAsyncClient::future_send_transaction(apache::thrift::RpcOptions& rpcOptions, const  ::node::cpp2::SendTransactionRequest& request) {
  folly::Promise< ::node::cpp2::SendTransactionResponse> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback< ::node::cpp2::SendTransactionResponse>>(std::move(_promise), recv_wrapped_send_transaction, channel_);
  send_transaction(rpcOptions, std::move(callback), request);
  return _future;
}

folly::SemiFuture< ::node::cpp2::SendTransactionResponse> NodeAsyncClient::semifuture_send_transaction(apache::thrift::RpcOptions& rpcOptions, const  ::node::cpp2::SendTransactionRequest& request) {
  return future_send_transaction(rpcOptions, request).semi();
}

folly::Future<std::pair< ::node::cpp2::SendTransactionResponse, std::unique_ptr<apache::thrift::transport::THeader>>> NodeAsyncClient::header_future_send_transaction(apache::thrift::RpcOptions& rpcOptions, const  ::node::cpp2::SendTransactionRequest& request) {
  folly::Promise<std::pair< ::node::cpp2::SendTransactionResponse, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback< ::node::cpp2::SendTransactionResponse>>(std::move(_promise), recv_wrapped_send_transaction, channel_);
  send_transaction(rpcOptions, std::move(callback), request);
  return _future;
}

folly::SemiFuture<std::pair< ::node::cpp2::SendTransactionResponse, std::unique_ptr<apache::thrift::transport::THeader>>> NodeAsyncClient::header_semifuture_send_transaction(apache::thrift::RpcOptions& rpcOptions, const  ::node::cpp2::SendTransactionRequest& request) {
  return NodeAsyncClient::header_future_send_transaction(rpcOptions, request).semi();
}

void NodeAsyncClient::send_transaction(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::node::cpp2::SendTransactionRequest& request) {
  send_transaction(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), request);
}

folly::exception_wrapper NodeAsyncClient::recv_wrapped_send_transaction( ::node::cpp2::SendTransactionResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = Node_send_transaction_presult;
  constexpr auto const fname = "send_transaction";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void NodeAsyncClient::recv_send_transaction( ::node::cpp2::SendTransactionResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_send_transaction(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void NodeAsyncClient::recv_instance_send_transaction( ::node::cpp2::SendTransactionResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_send_transaction(_return, state);
}

folly::exception_wrapper NodeAsyncClient::recv_instance_wrapped_send_transaction( ::node::cpp2::SendTransactionResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_send_transaction(_return, state);
}

void NodeAsyncClient::get_peer(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::node::cpp2::GetPeerInfoRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  get_peerImpl(false, rpcOptions, std::move(callback), request);
}

void NodeAsyncClient::get_peer(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::node::cpp2::GetPeerInfoRequest& request) {
  get_peerImpl(false, rpcOptions, std::move(callback), request);
}

void NodeAsyncClient::get_peerImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::node::cpp2::GetPeerInfoRequest& request) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      get_peerT(&writer, useSync, rpcOptions, std::move(callback), request);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      get_peerT(&writer, useSync, rpcOptions, std::move(callback), request);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void NodeAsyncClient::sync_get_peer( ::node::cpp2::GetPeerInfoResponse& _return, const  ::node::cpp2::GetPeerInfoRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_get_peer(rpcOptions, _return, request);
}

void NodeAsyncClient::sync_get_peer(apache::thrift::RpcOptions& rpcOptions,  ::node::cpp2::GetPeerInfoResponse& _return, const  ::node::cpp2::GetPeerInfoRequest& request) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE);
  get_peerImpl(true, rpcOptions, std::move(callback), request);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_get_peer(_return, _returnState);
}

folly::Future< ::node::cpp2::GetPeerInfoResponse> NodeAsyncClient::future_get_peer(const  ::node::cpp2::GetPeerInfoRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_get_peer(rpcOptions, request);
}

folly::SemiFuture< ::node::cpp2::GetPeerInfoResponse> NodeAsyncClient::semifuture_get_peer(const  ::node::cpp2::GetPeerInfoRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_get_peer(rpcOptions, request);
}

folly::Future< ::node::cpp2::GetPeerInfoResponse> NodeAsyncClient::future_get_peer(apache::thrift::RpcOptions& rpcOptions, const  ::node::cpp2::GetPeerInfoRequest& request) {
  folly::Promise< ::node::cpp2::GetPeerInfoResponse> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback< ::node::cpp2::GetPeerInfoResponse>>(std::move(_promise), recv_wrapped_get_peer, channel_);
  get_peer(rpcOptions, std::move(callback), request);
  return _future;
}

folly::SemiFuture< ::node::cpp2::GetPeerInfoResponse> NodeAsyncClient::semifuture_get_peer(apache::thrift::RpcOptions& rpcOptions, const  ::node::cpp2::GetPeerInfoRequest& request) {
  return future_get_peer(rpcOptions, request).semi();
}

folly::Future<std::pair< ::node::cpp2::GetPeerInfoResponse, std::unique_ptr<apache::thrift::transport::THeader>>> NodeAsyncClient::header_future_get_peer(apache::thrift::RpcOptions& rpcOptions, const  ::node::cpp2::GetPeerInfoRequest& request) {
  folly::Promise<std::pair< ::node::cpp2::GetPeerInfoResponse, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback< ::node::cpp2::GetPeerInfoResponse>>(std::move(_promise), recv_wrapped_get_peer, channel_);
  get_peer(rpcOptions, std::move(callback), request);
  return _future;
}

folly::SemiFuture<std::pair< ::node::cpp2::GetPeerInfoResponse, std::unique_ptr<apache::thrift::transport::THeader>>> NodeAsyncClient::header_semifuture_get_peer(apache::thrift::RpcOptions& rpcOptions, const  ::node::cpp2::GetPeerInfoRequest& request) {
  return NodeAsyncClient::header_future_get_peer(rpcOptions, request).semi();
}

void NodeAsyncClient::get_peer(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::node::cpp2::GetPeerInfoRequest& request) {
  get_peer(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), request);
}

folly::exception_wrapper NodeAsyncClient::recv_wrapped_get_peer( ::node::cpp2::GetPeerInfoResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = Node_get_peer_presult;
  constexpr auto const fname = "get_peer";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void NodeAsyncClient::recv_get_peer( ::node::cpp2::GetPeerInfoResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_get_peer(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void NodeAsyncClient::recv_instance_get_peer( ::node::cpp2::GetPeerInfoResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_get_peer(_return, state);
}

folly::exception_wrapper NodeAsyncClient::recv_instance_wrapped_get_peer( ::node::cpp2::GetPeerInfoResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_get_peer(_return, state);
}

}} // node::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
