/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <folly/futures/Future.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <thrift/lib/cpp2/async/HeaderChannel.h>
#include "node/gen-cpp2/NodeAsyncClient.h"
#include "node/gen-cpp2/node_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace node { namespace cpp2 {

class NodeSvAsyncIf {
 public:
  virtual ~NodeSvAsyncIf() {}
  virtual void async_tm_notify_new_inventory_hash(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::node::cpp2::NotifyNewInventoryResponse>>> callback, std::unique_ptr< ::node::cpp2::NotifyNewInventoryRequest> request) = 0;
  virtual folly::Future<std::unique_ptr< ::node::cpp2::NotifyNewInventoryResponse>> future_notify_new_inventory_hash(std::unique_ptr< ::node::cpp2::NotifyNewInventoryRequest> request) = 0;
  virtual void async_tm_send_transaction(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::node::cpp2::SendTransactionResponse>>> callback, std::unique_ptr< ::node::cpp2::SendTransactionRequest> request) = 0;
  virtual folly::Future<std::unique_ptr< ::node::cpp2::SendTransactionResponse>> future_send_transaction(std::unique_ptr< ::node::cpp2::SendTransactionRequest> request) = 0;
  virtual void async_tm_get_peer(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::node::cpp2::GetPeerInfoResponse>>> callback, std::unique_ptr< ::node::cpp2::GetPeerInfoRequest> request) = 0;
  virtual folly::Future<std::unique_ptr< ::node::cpp2::GetPeerInfoResponse>> future_get_peer(std::unique_ptr< ::node::cpp2::GetPeerInfoRequest> request) = 0;
};

class NodeAsyncProcessor;

class NodeSvIf : public NodeSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef NodeAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  virtual void notify_new_inventory_hash( ::node::cpp2::NotifyNewInventoryResponse& /*_return*/, std::unique_ptr< ::node::cpp2::NotifyNewInventoryRequest> /*request*/);
  folly::Future<std::unique_ptr< ::node::cpp2::NotifyNewInventoryResponse>> future_notify_new_inventory_hash(std::unique_ptr< ::node::cpp2::NotifyNewInventoryRequest> request) override;
  void async_tm_notify_new_inventory_hash(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::node::cpp2::NotifyNewInventoryResponse>>> callback, std::unique_ptr< ::node::cpp2::NotifyNewInventoryRequest> request) override;
  virtual void send_transaction( ::node::cpp2::SendTransactionResponse& /*_return*/, std::unique_ptr< ::node::cpp2::SendTransactionRequest> /*request*/);
  folly::Future<std::unique_ptr< ::node::cpp2::SendTransactionResponse>> future_send_transaction(std::unique_ptr< ::node::cpp2::SendTransactionRequest> request) override;
  void async_tm_send_transaction(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::node::cpp2::SendTransactionResponse>>> callback, std::unique_ptr< ::node::cpp2::SendTransactionRequest> request) override;
  virtual void get_peer( ::node::cpp2::GetPeerInfoResponse& /*_return*/, std::unique_ptr< ::node::cpp2::GetPeerInfoRequest> /*request*/);
  folly::Future<std::unique_ptr< ::node::cpp2::GetPeerInfoResponse>> future_get_peer(std::unique_ptr< ::node::cpp2::GetPeerInfoRequest> request) override;
  void async_tm_get_peer(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::node::cpp2::GetPeerInfoResponse>>> callback, std::unique_ptr< ::node::cpp2::GetPeerInfoRequest> request) override;
};

class NodeSvNull : public NodeSvIf {
 public:
  void notify_new_inventory_hash( ::node::cpp2::NotifyNewInventoryResponse& /*_return*/, std::unique_ptr< ::node::cpp2::NotifyNewInventoryRequest> /*request*/) override;
  void send_transaction( ::node::cpp2::SendTransactionResponse& /*_return*/, std::unique_ptr< ::node::cpp2::SendTransactionRequest> /*request*/) override;
  void get_peer( ::node::cpp2::GetPeerInfoResponse& /*_return*/, std::unique_ptr< ::node::cpp2::GetPeerInfoRequest> /*request*/) override;
};

class NodeAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  const char* getServiceName() override;
  using BaseAsyncProcessor = void;
  using HasFrozen2 = std::false_type;
 protected:
  NodeSvIf* iface_;
  folly::Optional<std::string> getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) override;
 public:
  void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
 protected:
  bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) override;
 private:
  static std::unordered_set<std::string> onewayMethods_;
  static std::unordered_map<std::string, int16_t> cacheKeyMap_;
 public:
  using BinaryProtocolProcessFunc = ProcessFunc<NodeAsyncProcessor, apache::thrift::BinaryProtocolReader>;
  using BinaryProtocolProcessMap = ProcessMap<BinaryProtocolProcessFunc>;
  static const NodeAsyncProcessor::BinaryProtocolProcessMap& getBinaryProtocolProcessMap();
 private:
  static const NodeAsyncProcessor::BinaryProtocolProcessMap binaryProcessMap_;
 public:
  using CompactProtocolProcessFunc = ProcessFunc<NodeAsyncProcessor, apache::thrift::CompactProtocolReader>;
  using CompactProtocolProcessMap = ProcessMap<CompactProtocolProcessFunc>;
  static const NodeAsyncProcessor::CompactProtocolProcessMap& getCompactProtocolProcessMap();
 private:
  static const NodeAsyncProcessor::CompactProtocolProcessMap compactProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_notify_new_inventory_hash(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_notify_new_inventory_hash(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_notify_new_inventory_hash(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::node::cpp2::NotifyNewInventoryResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_notify_new_inventory_hash(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_send_transaction(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_send_transaction(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_send_transaction(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::node::cpp2::SendTransactionResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_send_transaction(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_get_peer(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_get_peer(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_get_peer(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::node::cpp2::GetPeerInfoResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get_peer(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  NodeAsyncProcessor(NodeSvIf* iface) :
      iface_(iface) {}

  virtual ~NodeAsyncProcessor() {}
};

}} // node::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
