/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "node/gen-cpp2/Node.h"
#include "node/gen-cpp2/Node.tcc"

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>

namespace node { namespace cpp2 {
std::unique_ptr<apache::thrift::AsyncProcessor> NodeSvIf::getProcessor() {
  return std::make_unique<NodeAsyncProcessor>(this);
}

void NodeSvIf::notify_new_inventory_hash( ::node::cpp2::NotifyNewInventoryResponse& /*_return*/, std::unique_ptr< ::node::cpp2::NotifyNewInventoryRequest> /*request*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("notify_new_inventory_hash");
}

folly::Future<std::unique_ptr< ::node::cpp2::NotifyNewInventoryResponse>> NodeSvIf::future_notify_new_inventory_hash(std::unique_ptr< ::node::cpp2::NotifyNewInventoryRequest> request) {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::node::cpp2::NotifyNewInventoryResponse& _return) { notify_new_inventory_hash(_return, std::move(request)); });
}

void NodeSvIf::async_tm_notify_new_inventory_hash(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::node::cpp2::NotifyNewInventoryResponse>>> callback, std::unique_ptr< ::node::cpp2::NotifyNewInventoryRequest> request) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_notify_new_inventory_hash(std::move(request)); });
}

void NodeSvIf::send_transaction( ::node::cpp2::SendTransactionResponse& /*_return*/, std::unique_ptr< ::node::cpp2::SendTransactionRequest> /*request*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("send_transaction");
}

folly::Future<std::unique_ptr< ::node::cpp2::SendTransactionResponse>> NodeSvIf::future_send_transaction(std::unique_ptr< ::node::cpp2::SendTransactionRequest> request) {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::node::cpp2::SendTransactionResponse& _return) { send_transaction(_return, std::move(request)); });
}

void NodeSvIf::async_tm_send_transaction(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::node::cpp2::SendTransactionResponse>>> callback, std::unique_ptr< ::node::cpp2::SendTransactionRequest> request) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_send_transaction(std::move(request)); });
}

void NodeSvIf::get_peer( ::node::cpp2::GetPeerInfoResponse& /*_return*/, std::unique_ptr< ::node::cpp2::GetPeerInfoRequest> /*request*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("get_peer");
}

folly::Future<std::unique_ptr< ::node::cpp2::GetPeerInfoResponse>> NodeSvIf::future_get_peer(std::unique_ptr< ::node::cpp2::GetPeerInfoRequest> request) {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::node::cpp2::GetPeerInfoResponse& _return) { get_peer(_return, std::move(request)); });
}

void NodeSvIf::async_tm_get_peer(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::node::cpp2::GetPeerInfoResponse>>> callback, std::unique_ptr< ::node::cpp2::GetPeerInfoRequest> request) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_get_peer(std::move(request)); });
}

void NodeSvNull::notify_new_inventory_hash( ::node::cpp2::NotifyNewInventoryResponse& /*_return*/, std::unique_ptr< ::node::cpp2::NotifyNewInventoryRequest> /*request*/) {}

void NodeSvNull::send_transaction( ::node::cpp2::SendTransactionResponse& /*_return*/, std::unique_ptr< ::node::cpp2::SendTransactionRequest> /*request*/) {}

void NodeSvNull::get_peer( ::node::cpp2::GetPeerInfoResponse& /*_return*/, std::unique_ptr< ::node::cpp2::GetPeerInfoRequest> /*request*/) {}

const char* NodeAsyncProcessor::getServiceName() {
  return "Node";
}

folly::Optional<std::string> NodeAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void NodeAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool NodeAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> NodeAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> NodeAsyncProcessor::cacheKeyMap_ {};
const NodeAsyncProcessor::BinaryProtocolProcessMap& NodeAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const NodeAsyncProcessor::BinaryProtocolProcessMap NodeAsyncProcessor::binaryProcessMap_ {
  {"notify_new_inventory_hash", &NodeAsyncProcessor::_processInThread_notify_new_inventory_hash<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"send_transaction", &NodeAsyncProcessor::_processInThread_send_transaction<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"get_peer", &NodeAsyncProcessor::_processInThread_get_peer<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const NodeAsyncProcessor::CompactProtocolProcessMap& NodeAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const NodeAsyncProcessor::CompactProtocolProcessMap NodeAsyncProcessor::compactProcessMap_ {
  {"notify_new_inventory_hash", &NodeAsyncProcessor::_processInThread_notify_new_inventory_hash<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"send_transaction", &NodeAsyncProcessor::_processInThread_send_transaction<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"get_peer", &NodeAsyncProcessor::_processInThread_get_peer<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}} // node::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
